/*
 * MQTT Listen Device (JSON) with Presence Sensor Option
 * - pir_detected: 1/0 triggers either motion or presence depending on settings
 */

import groovy.json.JsonSlurper

metadata {
    definition (name: "Mqtt Listen Device (JSON)", namespace: "ccoupe", 
                author: "Cecil Coupe + Qwerk") {
        capability "Initialize"
        capability "Switch"
        capability "ContactSensor"
        capability "MotionSensor"
        capability "TemperatureMeasurement"
        capability "PresenceSensor"
    }
}

preferences {
    input name: "MQTTBroker", type: "text", title: "MQTT Broker Address:", required: true, displayDuringSetup: true
    input name: "username", type: "text", title: "MQTT Username:", description: "(blank if none)", required: false, displayDuringSetup: true
    input name: "password", type: "password", title: "MQTT Password:", description: "(blank if none)", required: false, displayDuringSetup: true
    input name: "topicSub", type: "text", title: "Topic to Subscribe:", description: "Example Topic 'path/to/switch/state", required: false, displayDuringSetup: true
    input (name: "switch", type: "bool", required: false, displayDuringSetup: true,
          title: "Switch?", defaultValue: false, description: "Generate On/Off events")
    input (name: "contact", type: "bool", required: false, displayDuringSetup: true,
          title: "Contact?", defaultValue: false, description: "Generate open/close events")
    input (name: "temperature", type: "bool", required: false, displayDuringSetup: true,
          title: "Temperature?", defaultValue: false, description: "Generate temperature events")
    input (name: "motion", type: "bool", required: false, displayDuringSetup: true,
          title: "Motion?", defaultValue: true, description: "Generate active/inactive events")
    input (name: "presence", type: "bool", required: false, displayDuringSetup: true,
          title: "Presence?", defaultValue: false, description: "Generate present/not present events from pir_detected")
    input (name: "AutoOff",type: "bool", title: "Enable auto off", required: false, 
          displayDuringSetup: false, defaultValue: false)
    input (name: "offSecs", type: "number", title: "Seconds to Off", required: false,
          displayDuringSetup: true, defaultValue: 10,
          description: "Seconds until auto turning off/close/inactive")
    input("logEnable", "bool", title: "Enable logging", required: true, defaultValue: true)
}

def installed() {
    log.info "installed..."
}

def updated() {
    if (logEnable) log.info "Updated..."
    if (!interfaces.mqtt.isConnected()) {
        initialize()
    }
    configure()
}

def uninstalled() {
    if (logEnable) log.info "Disconnecting from mqtt"
    interfaces.mqtt.disconnect()
}

def initialize() {
    if (logEnable) runIn(900,logsOff)
    try {
        def mqttInt = interfaces.mqtt
        def mqttbroker = "tcp://${settings?.MQTTBroker}:1883"
        def brokerName = "${getLocation().getHub().name}_${device.id}"
        log.info "connect to ${mqttbroker} as ${brokerName}"
        mqttInt.connect(mqttbroker, brokerName, settings?.username, settings?.password)
        pauseExecution(1000)
        log.info "Connection established"
        def topic = settings?.topicSub
        if (logEnable) log.debug "Subscribed to: ${topic}"
        mqttInt.subscribe(topic)
    } catch(e) {
        if (logEnable) log.debug "Initialize error: ${e.message}"
    }
}

def configure() {
    log.info "Configure"
}

def logsOff(){
    log.warn "Debug logging disabled."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}

// Main MQTT message handler
def parse(String description) {
    def msg = interfaces.mqtt.parseMessage(description)
    def topic = msg.topic
    def payload = msg.payload

    if (logEnable) log.info "on message: ${topic} : ${payload}"

    if (topic == settings?.topicSub) {
        def cleanPayload = payload.replaceFirst(/^=\s*/, '')
        try {
            def json = new JsonSlurper().parseText(cleanPayload)
            if (json.pir_detected != null) {
                // PRESENCE MODE: Use pir_detected for presence, NOT motion, if presence is enabled
                if (settings?.presence) {
                    if (json.pir_detected == 1) {
                        if (logEnable) log.debug "Presence detected (via pir_detected: 1)"
                        presenceOn()
                    } else {
                        if (logEnable) log.debug "Presence cleared (via pir_detected: 0)"
                        presenceOff()
                    }
                    return
                }
                // MOTION MODE: Use pir_detected for motion if enabled and presence is NOT enabled
                if (settings?.motion && !settings?.presence) {
                    if (json.pir_detected == 1) {
                        if (logEnable) log.debug "Motion detected (via pir_detected: 1)"
                        turnedOn()
                    } else {
                        if (logEnable) log.debug "Motion cleared (via pir_detected: 0)"
                        turnedOff()
                    }
                    return
                }
            }
        } catch (Exception e) {
            if (logEnable) log.warn "JSON parse error: ${e.message}"
        }
        // fallback voor niet-JSON payloads
        if (settings?.temperature) {
            updateTemp(cleanPayload)
        } else if (settings?.switch && (cleanPayload.compareToIgnoreCase("On") == 0 || cleanPayload == "1")) {
            turnedOn()
        } else if (settings?.switch && (cleanPayload.compareToIgnoreCase("Off") == 0 || cleanPayload == "0")) {
            turnedOff()
        }
    }
}

def updateTemp(String payload) {
    try {
        def map = [:]
        map.name = 'temperature'
        map.unit = '\u00B0' + 'F'
        map.value = payload.toFloat()
        sendEvent(map)
    } catch (e) {
        log.warn "Fout bij temperatuurupdate: ${e.message}"
    }
}

def turnedOn() {
    if (settings?.switch)
        sendEvent(name: "switch", value: "on")
    if (settings?.contact)
        sendEvent(name: "contact", value: "open")
    if (settings?.motion)
        sendEvent(name: "motion", value: "active")
    if (settings?.AutoOff) {
        def sec = settings?.offSecs.toInteger()
        runIn(sec, turnedOff)
    }
}

def turnedOff() {
    if (settings?.switch)
        sendEvent(name: "switch", value: "off")
    if (settings?.contact)
        sendEvent(name: "contact", value: "closed")
    if (settings?.motion)
        sendEvent(name: "motion", value: "inactive")
}

// Presence events
def presenceOn() {
    sendEvent(name: "presence", value: "present")
    if (settings?.AutoOff) {
        def sec = settings?.offSecs.toInteger()
        runIn(sec, presenceOff)
    }
}

def presenceOff() {
    sendEvent(name: "presence", value: "not present")
}

def on() {
    log.warn "On is not supported nor wanted"
}

def off() {
    log.warn "Off is not supported nor wanted"
}

def mqttClientStatus(String status) {
    if (status.startsWith("Error")) {
        def restart = false
        if (!interfaces.mqtt.isConnected()) {
            log.warn "mqtt isConnected false"
            restart = true
        } else if (status.contains("lost")) {
            log.warn "mqtt Connection lost detected"
            restart = true
        } else {
            log.warn "mqtt error: ${status}"
        }
        if (restart) {
            def i = 0
            while (i < 60) {
                pauseExecution(1000*60)
                initialize()
                if (interfaces.mqtt.isConnected()) {
                    log.info "mqtt reconnect success!"
                    break
                }
                i = i + 1
            }
        }
    } else {
        if (logEnable) log.warn "mqtt OK: ${status}"
    }
}
